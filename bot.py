import asyncio
import datetime
import io
import json
import random

import discord
import requests
from PIL import Image, ImageFont, ImageDraw
from discord.ext import commands

from config import *

prefix = settings['PREFIX']

client = commands.Bot(
    command_prefix=settings['PREFIX'])

client.remove_command('help')


# –Ω–∞ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–∂–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
@client.event
async def on_ready():
    print("–ü–û–î–ö–õ–Æ–ß–Å–ù –ò –ì–û–¢–û–í –ú–Ø–£")
    await client.change_presence(status=discord.Status.online, activity=discord.Game("&help"))


# –µ—Å–ª–∏ –∫–æ–º–º–∞–Ω–¥–∞ –≤–≤–µ–¥–∏–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
@client.event
async def on_command_error(ctx, error):
    print(error)

    if isinstance(error, commands.MissingPermissions):
        await ctx.send(f"{ctx.author}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!")
    elif isinstance(error, commands.UserInputError):
        await ctx.send(embed=discord.Embed(
            description=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: `{ctx.prefix}{ctx.command.name}` ({ctx.command.brief})\nExample: {ctx.prefix}{ctx.command.usage}"
        ))


# –ø–∏–Ω–≥ –±–æ—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
@client.command(
    aliases=['Ping', 'PING', 'pING', 'ping', '–ü–∏–Ω–≥', '–ü–ò–ù–ì', '–ø–ò–ù–ì', '–ø–∏–Ω–≥', '–ü–æ–Ω–≥', '–ü–û–ù–ì', '–ø–û–ù–ì', '–ø–æ–Ω–≥'])
async def __ping(ctx):
    ping = client.ws.latency
    ping_emoji = 'üü©üî≥üî≥üî≥üî≥'
    if ping > 0.10000000000000000:
        ping_emoji = 'üüßüü©üî≥üî≥üî≥'
    if ping > 0.15000000000000000:
        ping_emoji = 'üü•üüßüü©üî≥üî≥'
    if ping > 0.20000000000000000:
        ping_emoji = 'üü•üü•üüßüü©üî≥'
    if ping > 0.25000000000000000:
        ping_emoji = 'üü•üü•üü•üüßüü©'
    if ping > 0.30000000000000000:
        ping_emoji = 'üü•üü•üü•üü•üüß'
    if ping > 0.35000000000000000:
        ping_emoji = 'üü•üü•üü•üü•üü•'

    message = await ctx.send('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. . .')
    await message.edit(
        content=f'–ü–æ–Ω–≥! {ping_emoji} `{ping * 1000:.0f}ms` :ping_pong:')
    print(
        f'[Logs:utils] –ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª –≤—ã–≤–µ–¥–µ–Ω | {prefix}ping')
    print(f'[Logs:utils] –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∏–Ω–≥ == {ping * 1000:.0f}ms | {prefix}ping')


# –ø–æ–º–æ—â—å
@client.command(aliases=['Help', 'help', 'HELP', 'hELP', '—Ö–µ–ª–ø', '–•–µ–ª–ø', '–•–ï–õ–ü', '—Ö–ï–õ–ü'])
async def __help(ctx):
    emb = discord.Embed(title='–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:', colour=discord.Color.red())

    emb.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
    emb.add_field(name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                  value=f'`{prefix}—Ö–µ–ª–ø` `{prefix}–∏–Ω—Ñ–æ` `{prefix}server` `{prefix}–ø—Ä–æ—Ñ–∏–ª—å` `{prefix}–∞–≤—Ç–æ—Ä—ã` ',
                  inline=False)
    emb.add_field(name='–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', value=f'`{prefix}mute` `{prefix}ban` `{prefix}kick` `{prefix}clear`',
                  inline=False)
    emb.add_field(name='–±–æ—Ç',
                  value=f'`{prefix}bot` `{prefix}cool` `{prefix}server` `{prefix}pic` `{prefix}ping`',
                  inline=False)
    emb.add_field(name='–ß—Ç–æ —Ç–æ..',
                  value=f'`{prefix}—è/–∫–∞—Ä—Ç–∞` `{prefix}time` `{prefix}phone_info` `{prefix}ip_info` `{prefix}game` `{prefix}roll`',
                  inline=False)
    emb.add_field(name='–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏',
                  value=f'`{prefix}tictactoe` `{prefix}place`', inline=False)
    emb.set_thumbnail(url=client.user.avatar_url)
    emb.set_footer(icon_url=client.user.avatar_url, text=f'{client.user.name} ¬© Copyright 2022 | –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã')

    await ctx.send(embed=emb)

    print(f'[Logs:info] –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–∞ | {prefix}help ')


# —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É
@client.command('pic')
async def pic(ctx, naming):
    link = 'https://some-random-api.ml/img/' + naming
    response = requests.get(link)
    json_data = json.loads(response.text)
    embed = discord.Embed(color=0xff9900, title='Your pic')
    embed.set_image(url=json_data['link'])
    await ctx.send(embed=embed)


# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
@client.command()
async def server(ctx):
    name = str(ctx.guild.name)
    description = str(ctx.guild.description)

    owner = str(ctx.guild.owner)
    id = str(ctx.guild.id)
    region = str(ctx.guild.region)
    memberCount = str(ctx.guild.member_count)

    icon = str(ctx.guild.icon_url)

    embed = discord.Embed(
        title=name + " –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
        description=description,
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=icon)
    embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=owner, inline=True)
    embed.add_field(name="–ê–π–¥–∏ —Å–µ—Ä–≤–µ—Ä–∞", value=id, inline=True)
    embed.add_field(name="–†–µ–≥–∏–æ–Ω", value=region, inline=True)
    embed.add_field(name="–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=memberCount, inline=True)

    await ctx.send(embed=embed)


# —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç N –¥–æ N
@client.command()
async def roll(ctx, num1, num2):
    await ctx.send(random.randint(int(num1), int(num2)))


# –¢–æ—Ç –∫—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É –Ω–µ –∫—Ä—É—Ç–æ–π(
@client.command()
async def cool(ctx, member: discord.Member):
    if ctx.invoked_subcommand is None:
        await ctx.send(f'–ù–µ—Ç, {member.name} –Ω–µ –∫—Ä—É—Ç–æ–π')


# –ë–æ—Ç –∫—Ä—É—Ç–æ–π!
@client.command(name='bot')
async def _bot(ctx):
    await ctx.send('–î–∞ –±–æ—Ç –∫—Ä—É—Ç–æ–π!')


# –≤—ã–¥–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
@client.event
async def on_member_join(member):
    channel = client.get_channel(935814911244767252)

    role = discord.utils.get(member.guild.roles, id=934744764908179476)

    await member.add_roles(role)
    await channel.send(
        embed=discord.Embed(description=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ``{member.name}``, –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ –Ω–∞–º!', color=0x3ec95d))


# —Ü–µ–Ω–∑—É—Ä–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@client.event
async def on_message(message):
    await client.process_commands(message)
    msg = message.content.lower()
    if msg in greeting_words:
        await message.channel.send(f"{message.author.name}, –∫—É!")

    for bad_content in msg.split(" "):
        if bad_content in bad_words:
            await message.channel.send(f"{message.author.mention}, –Ω–µ–ª—å–∑—è —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å")
            await message.delete()

# –Ω–µ–º–Ω–æ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
@client.command()
async def math(ctx, a: int, arg, b: int):
    if arg == '+':
        await ctx.send(f'Result: {a + b}')

    elif arg == '-':
        await ctx.send(f'Result: {a - b}')

    elif arg == '/':
        await ctx.send(f'Result: {a / b}')


# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–π–ø–∏
@client.command()
async def ip_info(ctx, arg):
    response = requests.get(f'http://ipinfo.io/{arg}/json')

    user_ip = response.json()['ip']
    user_city = response.json()['city']
    user_region = response.json()['region']
    user_country = response.json()['country']
    user_location = response.json()['loc']
    user_org = response.json()['org']
    user_timezone = response.json()['timezone']

    global all_info
    all_info = f'\n<INFO>\nIP : {user_ip}\nCity : {user_city}\nRegion : {user_region}\nCountry : {user_country}\nLocation : {user_location}\nOrganization : {user_org}\nTime zone : {user_timezone}'

    await ctx.author.send(all_info)


# uuid
@client.command()
async def key(ctx):
    import uuid
    await ctx.send(f'Key : {uuid.uuid4()}')


# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@client.command()
async def phone_info(ctx, arg):
    response = requests.get(f'https://htmlweb.ru/geo/api.php?json&telcod={arg}')

    user_country = response.json()['country']['english']
    user_id = response.json()['country']['id']
    user_location = response.json()['country']['location']
    user_city = response.json()['capital']['english']
    user_width = response.json()['capital']['latitude']
    user_lenth = response.json()['capital']['longitude']
    user_post = response.json()['capital']['post']
    user_oper = response.json()['0']['oper']

    global all_info
    all_info = f'<INFO>\nCountry : {user_country}\nID : {user_id}\nLocation : {user_location}\nCity : {user_city}\nLatitude : {user_width}\nLongitude : {user_lenth}\nIndex post : {user_post}\nOperator : {user_oper}'

    await ctx.author.send(all_info)


# –æ—á–∏—Å—Ç–∫–∞
@client.command(name="clear", brief="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–æ–æ–±—â–µ–Ω–∏–π", usage="clear <amount=10>")
@commands.has_permissions(administrator=True)
async def clear(ctx, amount: int = 10):
    await ctx.channel.purge(limit=amount)
    await ctx.send(f"Was deleted {amount} messages...")


# –∫–∏–∫–Ω—É—Ç—å
@client.command(name="kick", brief="–í—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞", usage="kick <@user> <reason=None>")
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason=None):
    await ctx.message.delete(delay=1)

    await member.send(f"–ü–æ–∫–∞ –±–æ—Ç–∏–∫")
    await ctx.send(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –≤—ã–≥–Ω–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞!")
    await member.kick(reason=reason)


# –∑–∞–±–∞–Ω–∏—Ç—å
@client.command(name="ban", brief="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", usage="ban <@user> <reason=None>")
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason=None):
    await member.send(f"–¢—ã –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –±–æ—Ç")
    await ctx.send(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    await member.ban(reason=reason)


# —Ä–∞–∑–±–∞–Ω–∏—Ç—å
@client.command(name="unban", brief="–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", usage="unban <user_id>")
@commands.has_permissions(ban_members=True)
async def unban(ctx, user_id: int):
    user = await client.fetch_user(user_id)
    await ctx.guild.unban(user)


# –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
@client.command()
async def time(ctx):
    emb = discord.Embed(title='–í–†–ï–ú–Ø', description='–í—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è', colour=discord.Color.green(),
                        url='https://www.timeserver.ru')

    emb.set_author(name=client.user.name, icon_url=client.user.avatar_url)
    emb.set_footer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!')
    emb.set_thumbnail(url='https://sun9-35.userapi.com/c200724/v200724757/14f24/BL06miOGVd8.jpg')

    now_date = datetime.datetime.now()

    emb.add_field(name='Time', value='Time : {}'.format(now_date))

    await ctx.author.send(embed=emb)


@client.command()
async def quote(ctx):
    response = requests.get('http://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=json&lang=ru')
    r = response.json()

    await ctx.send(r["quoteText"])
    await ctx.send(r["quoteAuthor"])

# –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
@client.command(aliases=['—è', '–∫–∞—Ä—Ç–∞'])
async def card_user(ctx):
    await ctx.channel.purge(limit=1)

    img = Image.new('RGBA', (400, 200), '#232529')
    url = str(ctx.author.avatar_url)[:-10]

    response = requests.get(url, stream=True)
    response = Image.open(io.BytesIO(response.content))
    response = response.convert('RGBA')
    response = response.resize((100, 100), Image.ANTIALIAS)

    img.paste(response, (15, 15, 115, 115))

    idraw = ImageDraw.Draw(img)
    name = ctx.author.name
    tag = ctx.author.discriminator

    headline = ImageFont.truetype('arial.ttf', size=20)
    undertext = ImageFont.truetype('arial.ttf', size=12)

    idraw.text((145, 15), f'{name}#{tag}', font=headline)
    idraw.text((145, 50), f'ID: {ctx.author.id}', font=undertext)

    img.save('user_card.png')

    await ctx.send(file=discord.File(fp='user_card.png'))


# –º—É—Ç
@client.command(aliases=['mute'])
async def __mute(ctx, member: discord.Member = None, amount_time=None, *, reason=None):
    if member is None:
        await ctx.send(embed=discord.Embed(
            title=f'{ctx.author.mention}, **—É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**',
            description=f'–ü—Ä–∏–º–µ—Ä: .mute **@user** time reason'
        ))
    elif amount_time is None:
        await ctx.send(embed=discord.Embed(
            title=f'{ctx.author.mention}, **—É–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏**',
            description=f'–ü—Ä–∏–º–µ—Ä: .mute @user **time** reason'
        ))
    elif reason is None:
        await ctx.send(embed=discord.Embed(
            title=f'{ctx.author.mention}, **—É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É**',
            description=f'–ü—Ä–∏–º–µ—Ä: .mute @user time **reason**'
        ))
    else:
        if 'm' in amount_time:
            await ctx.send(embed=discord.Embed(
                description=f'''**[<:_off:934743682626781184>]** –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ **{amount_time}**.
                **–í—ã–¥–∞–ª –º—É—Ç:** {ctx.author}
                ```css
–ü—Ä–∏—á–∏–Ω–∞: [{reason}]
                ```
                ''',
                color=0x36393E,
            ))

            mute_role = discord.utils.get(ctx.guild.roles, id=934743682626781184)
            await member.add_roles(mute_role)
            await asyncio.sleep(int(amount_time[:-1]) * 60)
            await member.remove_roles(mute_role)

            await ctx.send(embed=discord.Embed(
                description=f'''**[<:rage:934743682626781184>]** –í—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –≤—ã –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã''',
                color=0x2F3136
            ))
        elif 'h' in amount_time:
            await ctx.send(embed=discord.Embed(
                description=f'''**[<::rage:934743682626781184>]** –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ **{amount_time}**.
                **–í—ã–¥–∞–ª –º—É—Ç:** {ctx.author}
                ```css
–ü—Ä–∏—á–∏–Ω–∞: [{reason}]
                ```
                ''',
                color=0x36393E,
            ))

            mute_role = discord.utils.get(ctx.guild.roles, id=934743682626781184)
            await member.add_roles(mute_role)
            await asyncio.sleep(int(amount_time[:-1]) * 60 * 60)
            await member.remove_roles(mute_role)

            await ctx.send(embed=discord.Embed(
                description=f'''**[<:rage:934743682626781184>]** –í—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –≤—ã –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã''',
                color=0x2F3136
            ))
        elif 'd' in amount_time:
            await ctx.send(embed=discord.Embed(
                description=f'''**[<:rage:934743682626781184>]** –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ **{amount_time}**.
                **–í—ã–¥–∞–ª –º—É—Ç:** {ctx.author}
                ```css
–ü—Ä–∏—á–∏–Ω–∞: [{reason}]
                ```
                ''',
                color=0x36393E,
            ))

            mute_role = discord.utils.get(ctx.guild, id=934743682626781184)
            await member.add_roles(mute_role)
            await asyncio.sleep(int(amount_time[:-1]) * 60 * 60 * 24)
            await member.remove_roles(mute_role)

            await ctx.send(embed=discord.Embed(
                description=f'''**[<:rage:934743682626781184>]** –í—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –≤—ã –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã''',
                color=0x2F3136
            ))
        else:
            await ctx.send(embed=discord.Embed(
                description=f'''**[<:rage:934743682626781184>]** –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ **{amount_time}s**.
                **–í—ã–¥–∞–ª –º—É—Ç:** {ctx.author}
                ```css
–ü—Ä–∏—á–∏–Ω–∞: [{reason}]
                ```
                ''',
                color=0x36393E,
            ))

            mute_role = discord.utils.get(ctx.guild.roles, id=934743682626781184)
            await member.add_roles(mute_role)
            await asyncio.sleep(int(amount_time))
            await member.remove_roles(mute_role)

            await ctx.send(embed=discord.Embed(
                description=f'''**[<:sunglasses:934743682626781184>]** –í—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –≤—ã –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã''',
                color=0x2F3136
            ))


# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
@client.command()
async def game(self, ctx):
    number = random.randint(0, 100)
    for i in range(0, 5):
        await ctx.send('guess')
        response = await self.bot.wait_for('message')
        guess = int(response.content)
        if guess > number:
            await ctx.send('–ë–æ–ª—å—à–µ')
        elif guess < number:
            await ctx.send('–ú–µ–Ω—å—à–µ')
        else:
            await ctx.send('–£–≥–∞–¥–∞–ª–∏')


# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –∏ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
@client.command()
async def tictactoe(ctx, p1: discord.Member, p2: discord.Member):
    global count
    global player1
    global player2
    global turn
    global gameOver

    if gameOver:
        global board
        board = [":white_large_square:", ":white_large_square:", ":white_large_square:",
                 ":white_large_square:", ":white_large_square:", ":white_large_square:",
                 ":white_large_square:", ":white_large_square:", ":white_large_square:"]
        turn = ""
        gameOver = False
        count = 0

        player1 = p1
        player2 = p2

        line = ""
        for x in range(len(board)):
            if x == 2 or x == 5 or x == 8:
                line += " " + board[x]
                await ctx.send(line)
                line = ""
            else:
                line += " " + board[x]

        num = random.randint(1, 2)
        if num == 1:
            turn = player1
            await ctx.send("–≠—Ç–æ —Ö–æ–¥ <@" + str(player1.id) + ">")
        elif num == 2:
            turn = player2
            await ctx.send("–≠—Ç–æ —Ö–æ–¥ <@" + str(player2.id) + ">")
    else:
        await ctx.send("–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã")


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
@client.command()
async def place(ctx, pos: int):
    global turn
    global player1
    global player2
    global board
    global count
    global gameOver

    if not gameOver:
        mark = ""
        if turn == ctx.author:
            if turn == player1:
                mark = ":regional_indicator_x:"
            elif turn == player2:
                mark = ":o2:"
            if 0 < pos < 10 and board[pos - 1] == ":white_large_square:":
                board[pos - 1] = mark
                count += 1

                # print the board
                line = ""
                for x in range(len(board)):
                    if x == 2 or x == 5 or x == 8:
                        line += " " + board[x]
                        await ctx.send(line)
                        line = ""
                    else:
                        line += " " + board[x]

                checkWinner(winningConditions, mark)
                print(count)
                if gameOver == True:
                    await ctx.send(mark + " –ø–æ–±–µ–¥–∏–ª!")
                elif count >= 9:
                    gameOver = True
                    await ctx.send("–≠—Ç–æ –Ω–∏—á—å—è")

                # switch turns
                if turn == player1:
                    turn = player2
                elif turn == player2:
                    turn = player1
            else:
                await ctx.send("–í—ã —Ç–æ—á–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç 1 –¥–æ 9")
        else:
            await ctx.send("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —Ö–æ–¥")
    else:
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–º–∞–Ω–¥–æ–π !tictactoe")


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
def checkWinner(winningConditions, mark):
    global gameOver
    for condition in winningConditions:
        if board[condition[0]] == mark and board[condition[1]] == mark and board[condition[2]] == mark:
            gameOver = True


# –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞
@tictactoe.error
async def tictactoe_error(ctx, error):
    print(error)
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∏–Ω–≥–∞–Ω–∏—Ç–µ —Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å")


# –æ—à–∏–±–∫–∞ –≤ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∏–∏ –∫—Ä–µ—Å—Ç–∏–∫–∞
@place.error
async def place_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫—É—é –∫–ª–µ—Ç–æ—á–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –º–µ—Ç–∫—É")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ü–∏—à–∏—Ç–µ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏")

if __name__ == '__main__':
    client.run(settings['TOKEN'])
